package com.untamedears.contraptions.gadgets;

import com.untamedears.contraptions.utility.Resource;
import com.untamedears.contraptions.utility.InventoryHelpers;
import java.util.Set;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.json.JSONObject;

/**
 * A gadget which will consume and itemstack and convert it into a resource.
 *
 * This can be used for things such as powering Contraptions via the items they
 * contain within them
 *
 * It can be imported from a JSON object in the following format
 * <pre>
 * {
 *   "itemstacks":
 *     [{
 *         "material": "MATERIAL_NAME",
 *         "amount": 1,
 *         "durability": 0,
 *         "name": "DISPLAY_NAME",
 *         "lore": "LORE"
 *       },...
 *       }],
 *   "conversion": 1
 * }
 * </pre>
 */
public class GenerationGadget {

    //ItemStacks consumed to generate resouce
    Set<ItemStack> itemStacks;
    //The amount of resource generated with each item set
    int conversion;

    /**
     * Creates a GenerationGadget
     *
     * @param itemStacks The ItemStacks consumed
     * @param conversion The amount of resource generated by the ItemStacks
     */
    public GenerationGadget(Set<ItemStack> itemStacks, int conversion) {
        this.itemStacks = itemStacks;
        this.conversion = conversion;
    }

    /**
     * Imports a GenerationGadget from a JSONObject
     *
     * @param jsonObject The JSONObject containing the information
     * @return A GenerationGadget with the properties contained in the
     *         JSONObject
     */
    public static GenerationGadget fromJSON(JSONObject jsonObject) {
        Set<ItemStack> itemStacks = InventoryHelpers.fromJSON(jsonObject.getJSONArray("itemstacks"));
        int conversion = jsonObject.getInt("conversion");
        return new GenerationGadget(itemStacks, conversion);
    }

    /**
     * Given an inventory checks if there are enough ItemStacks to generate
     * amount
     *
     * @param amount The amount of resource to generate
     * @param inventory The inventory to pull ItemStacks from
     * @return Check if there are enough ItemStacks to generate amount
     */
    public boolean canGenerate(double amount, Inventory inventory) {
        double amountAvailible = InventoryHelpers.amountAvailable(inventory, itemStacks);
        return amountAvailible * conversion >= amount;
    }

    /**
     * Consumes ItemSets to generate a resource
     *
     * @param amount    Amount of resource to produce
     * @param inventory The inventory from which to draw ItemStacks
     * @param resource  The resource to generate
     * @return If there were enough ItemStacks to generate amount
     */
    public boolean generate(double amount, Inventory inventory, Resource resource) {
        int numberOfSets = (int) Math.ceil(amount / conversion);
        if (InventoryHelpers.removeMultiple(inventory, itemStacks, numberOfSets)) {
            resource.change(numberOfSets * conversion);
            return true;
        }
        return false;
    }

}
